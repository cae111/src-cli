name: GoReleaser

on:
  push:
  # TODO: Restore me
  # tags:
  #   - '*'
  #   - '!latest'

jobs:
  goreleaser-pre:
    name: prepare-previous-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Fetch last tag
        id: last_tag
        run: echo "::set-output name=tag::$((git tag --sort=taggerdate | tail -1))"
      - name: Show last tag
        run: |
          echo "Output from last tag: ${{steps.last-tag.outputs.tag}}"
      # - name: Checkout Homebrew tap
      # - name: Copy main release formula file to versioned formula file
      # - name: Rename formula classname to match
      # - name: Commit result
  # goreleaser:
  #   name: release
  #   runs-on: ubuntu-latest
  #   needs: goreleaser-pre
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: Set up Go
  #       uses: actions/setup-go@v3
  #       with:
  #         go-version: 1.18
  #     - run: go get -d -t ./...
  #     - run: go test -i ./...
  #     - run: go test -race -v ./...
  #     - run: echo "${DOCKER_PASSWORD}" | docker login -u=sourcegraphci --password-stdin
  #       env:
  #         DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Run GoReleaser
  #       uses: goreleaser/goreleaser-action@v2
  #       with:
  #         version: latest
  #         args: release --rm-dist
  #       env:
  #         # Use separate access token, because we need a scope:repo token to publish the brew formula.
  #         GITHUB_TOKEN: ${{ secrets.GH_PAT }}
  # npm:
  #   runs-on: ubuntu-latest
  #   needs: goreleaser
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: 16
  #         registry-url: 'https://registry.npmjs.org'
  #     - run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
  #     - run: echo "Releasing version ${{ env.version }}"
  #     - run: yarn version --no-git-tag-version --new-version "${{ env.VERSION }}"
  #       working-directory: npm-distribution
  #     - run: npm publish --access public
  #       working-directory: npm-distribution
  #       env:
  #         NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
